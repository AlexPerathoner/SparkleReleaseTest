name: "Create Release"
on:
  issue_comment:
    types: [created]

concurrency:
  group: publish-release${{ github.ref }}
  cancel-in-progress: true

env:
  projname: testSparkleRelease

# please add some comments

jobs:
  release:
    name: "Publish binaries for release"
    runs-on: macos-12
    environment: deploy-release
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/release') && github.event.comment.author_association == 'OWNER'
    steps:
      - name: Add reactions
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: rocket
      - uses: xt0rted/pull-request-comment-branch@v1
        id: comment-branch
      - uses: actions/checkout@v3
        if: success()
        with:
          ref: ${{ steps.comment-branch.outputs.head_ref }}
      - name: Extract latest changes
        id: latest_changes
        run: |
          python3 ./Configuration/generate_latest_changes.py
          echo "new_version=$(cat new_version)" >> $GITHUB_OUTPUT
          echo "old_version=$(cat new_version)" >> $GITHUB_OUTPUT
          echo "title=$(cat title)" >> $GITHUB_OUTPUT
      - name: Check if version already released
        run: |
          if [[ $(xcrun agvtool what-version -terse) == $(cat new_version) ]]; then
            echo "Version already released" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
      - name: Check if release notes are empty
        run: |
          if [[ $(cat latest_changes) == "" ]]; then
            echo "Release notes are empty" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
      - name: Override versions in project
        run: |
          sed -i '' "s/_VERSION = $(xcrun agvtool what-version -terse)/_VERSION = ${{ steps.latest_changes.outputs.new_version }}/g" ${{ env.projname }}.xcodeproj/project.pbxproj;
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Switch Xcode version
        run: sudo xcode-select -s "/Applications/Xcode_14.2.app"
      - name: Xcode version
        run: /usr/bin/xcodebuild -version
      - name: Build and archive
        run: xcodebuild clean archive -project ${{ env.projname }}.xcodeproj -scheme ${{ env.projname }} -archivePath ${{ env.projname }}
      - name: Export app
        run: xcodebuild -exportArchive -archivePath "${{ env.projname }}.xcarchive" -exportPath Release -exportOptionsPlist "Configuration/ExportOptions.plist"
      - name: Zip app
        run: |
          cd Release
          zip -r -y ${{ env.projname }}.zip ${{ env.projname }}.app
          cd ..
      - name: Sign update
        env:
          PRIVATE_SPARKLE_KEY: ${{ secrets.PRIVATE_SPARKLE_KEY }}
        run: |
          echo $PRIVATE_SPARKLE_KEY > ./Configuration/sparkle_private_key
          ./Configuration/generate_keys -f Configuration/sparkle_private_key
          mv docs/Support/appcast.xml Release/appcast.xml
          ./Configuration/generate_appcast Release
          mv Release/appcast.xml docs/Support/appcast.xml
      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.latest_changes.outputs.title }}
          tag_name: v${{ steps.latest_changes.outputs.new_version }}
          fail_on_unmatched_files: true
          body_path: latest_changes
          files: |
            Release/${{ env.projname }}.zip
      - name: Cleanup
        run: |
          rm -rf Release
          rm -rf ${{ env.projname }}.xcarchive
          rm -rf ${{ env.projname }}.zip
          rm -rf latest_changes
          rm -rf new_version
          rm -rf title
          rm -rf Configuration/sparkle_private_key
      - name: Saving changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update version to v${{ steps.latest_changes.outputs.new_version }}"
      - name: Create summary
        run: |
          echo "Release v${{ steps.latest_changes.outputs.new_version }} created" >> $GITHUB_STEP_SUMMARY
      - uses: xt0rted/pull-request-comment-branch@v1 # checkout again, because the previous checkout is detached
        id: comment-branch-2
      - uses: actions/checkout@v3
        if: success()
        with:
          ref: ${{ steps.comment-branch-2.outputs.head_ref }}
      - name: Merge PR
        uses: "pascalgn/automerge-action@v0.15.5"
        env:
          MERGE_LABELS: ""
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_COMMIT_MESSAGE: "Release version v${{ steps.latest_changes.outputs.new_version }}"
          MERGE_FILTER_AUTHOR: "AlexPerathoner"
          MERGE_ERROR_FAIL: true
      - name: Add reactions
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: hooray
      - name: Add negative reaction
        if: failure()
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: "-1"

