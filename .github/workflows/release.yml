name: "Create Draft Release"

on:
  issue_comment:
    types: [created]
  pull_request:
    branches: ["master"]


concurrency: 
  group: publish-release${{ github.ref }}
  cancel-in-progress: true

env:
  projname: testSparkleRelease

jobs:
  release:
    name: "Publish binaries for release"
    runs-on: macos-12
    environment: deploy-release

    steps:
      - name: "Checkout sources"
        uses: actions/checkout@v3
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Switch Xcode version
        run: sudo xcode-select -s "/Applications/Xcode_14.2.app"
      - name: Xcode version
        run: /usr/bin/xcodebuild -version
      - name: Build and archive
        run: xcodebuild clean archive -project ${{ env.projname }}.xcodeproj -scheme ${{ env.projname }} -archivePath ${{ env.projname }}
      - name: Export app
        run: xcodebuild -exportArchive -archivePath "${{ env.projname }}.xcarchive" -exportPath Release -exportOptionsPlist "Release/ExportOptions.plist"
      - name: Zip app
        run: zip -r -y Release/${{ env.projname }}.zip Release/${{ env.projname }}.app
      - name: Extract latest changes
        run: echo "this are some changes" > latest-changes.txt
          
      # - name: "Extract latest changes from CHANGELOG"
      #   run: |
      #       ./Configurations/generate_latest_changes.py > latest-changes.txt
            
      # - name: "Overwrite project versions in project"
      #   run: |
      #       IFS='.' read major minor patch <<< "${{ github.event.inputs.marketingVersion }}"
      #       sed -E -i '' "s/SPARKLE_VERSION_MAJOR =.+/SPARKLE_VERSION_MAJOR = $major/g" ./Configurations/ConfigCommon.xcconfig
      #       sed -E -i '' "s/SPARKLE_VERSION_MINOR =.+/SPARKLE_VERSION_MINOR = $minor/g" ./Configurations/ConfigCommon.xcconfig
      #       sed -E -i '' "s/SPARKLE_VERSION_PATCH =.+/SPARKLE_VERSION_PATCH = $patch/g" ./Configurations/ConfigCommon.xcconfig
            
      #       if [[ ! -z "${{ github.event.inputs.prereleaseSuffix }}" ]]; then
      #           sed -E -i '' "s/SPARKLE_VERSION_SUFFIX =.*/SPARKLE_VERSION_SUFFIX = ${{ github.event.inputs.prereleaseSuffix }}/g" ./Configurations/ConfigCommon.xcconfig
      #       else
      #           sed -E -i '' "s/SPARKLE_VERSION_SUFFIX =.*/SPARKLE_VERSION_SUFFIX =/g" ./Configurations/ConfigCommon.xcconfig
      #       fi
            
      #       sed -E -i '' "s/CURRENT_PROJECT_VERSION =.+/CURRENT_PROJECT_VERSION = ${{ github.event.inputs.buildVersion }}/g" ./Configurations/ConfigCommon.xcconfig
      #       git add ./Configurations/ConfigCommon.xcconfig

      - name: "Draft a release"
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          name: "v1.1.0"
          tag_name: "v1.1.0"
          fail_on_unmatched_files: true
          body_path: latest-changes.txt
          files: |
            Release/${{ env.projname }}.zip
            