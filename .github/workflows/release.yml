name: "Create Draft Release"

on:
  issue_comment:
    types: [created]
  pull_request:
    branches: ["master"]

concurrency: 
  group: publish-release${{ github.ref }}
  cancel-in-progress: true

env:
  projname: testSparkleRelease

jobs:
  check-comment:
    runs-on: ubuntu-latest
    steps:
      - name: Execute for pull request comments only
        if: github.event.issue.pull_request && contains(github.event.comment.body, '/release')
        run: echo "hey!"
  release:
    name: "Publish binaries for release"
    runs-on: macos-12

    steps:
      - name: "Checkout sources"
        uses: actions/checkout@v3
      - name: Switch Xcode version
        run: sudo xcode-select -s "/Applications/Xcode_14.2.app"
      - name: Xcode version
        run: /usr/bin/xcodebuild -version
      - name: Build and archive
        run: xcodebuild clean archive -project ${{ env.projname }}.xcodeproj -scheme ${{ env.projname }} -archivePath ${{ env.projname }}
      - name: Export app
        run: xcodebuild -exportArchive -archivePath "${{ env.projname }}.xcarchive" -exportPath Release -exportOptionsPlist "Release/ExportOptions.plist"
      - name: Zip app
        run: zip -r -y Release/${{ env.projname }}.zip Release/${{ env.projname }}.app
      # - name: Cleanup
      #   run: |
      #     rm -R ${{ env.projname }}.xcarchive
      #     rm Release/DistributionSummary.plist
      #     rm Release/Packaging.log
      #     rm -R Release/${{ env.projname }}.app
          
      # - name: "Extract latest changes from CHANGELOG"
      #   run: |
      #       ./Configurations/generate_latest_changes.py > latest-changes.txt
            
      # - name: "Overwrite project versions in project"
      #   run: |
      #       IFS='.' read major minor patch <<< "${{ github.event.inputs.marketingVersion }}"
      #       sed -E -i '' "s/SPARKLE_VERSION_MAJOR =.+/SPARKLE_VERSION_MAJOR = $major/g" ./Configurations/ConfigCommon.xcconfig
      #       sed -E -i '' "s/SPARKLE_VERSION_MINOR =.+/SPARKLE_VERSION_MINOR = $minor/g" ./Configurations/ConfigCommon.xcconfig
      #       sed -E -i '' "s/SPARKLE_VERSION_PATCH =.+/SPARKLE_VERSION_PATCH = $patch/g" ./Configurations/ConfigCommon.xcconfig
            
      #       if [[ ! -z "${{ github.event.inputs.prereleaseSuffix }}" ]]; then
      #           sed -E -i '' "s/SPARKLE_VERSION_SUFFIX =.*/SPARKLE_VERSION_SUFFIX = ${{ github.event.inputs.prereleaseSuffix }}/g" ./Configurations/ConfigCommon.xcconfig
      #       else
      #           sed -E -i '' "s/SPARKLE_VERSION_SUFFIX =.*/SPARKLE_VERSION_SUFFIX =/g" ./Configurations/ConfigCommon.xcconfig
      #       fi
            
      #       sed -E -i '' "s/CURRENT_PROJECT_VERSION =.+/CURRENT_PROJECT_VERSION = ${{ github.event.inputs.buildVersion }}/g" ./Configurations/ConfigCommon.xcconfig
      #       git add ./Configurations/ConfigCommon.xcconfig

      - name: "Draft a release"
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          target_commitish: ${{ github.ref_name }}
          name: "v1.1.0"
          tag_name: "v1.1.0"
          fail_on_unmatched_files: true
          body_path: latest-changes.txt
          files: |
            Release/${{ env.projname }}.zip
            